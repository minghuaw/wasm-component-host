// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:
/// import sub: func(x: s32, y: s32) -> s32;
/// import mul: func(x: s32, y: s32) -> s32;
/// import div: func(x: s32, y: s32) -> s32;
/// import mod: func(x: s32, y: s32) -> s32;
#[repr(u8)]
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum Op {
    Add,
}
impl ::core::fmt::Debug for Op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self {
            Op::Add => f.debug_tuple("Op::Add").finish(),
        }
    }
}

impl Op {
    pub(crate) unsafe fn _lift(val: u8) -> Op {
        if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
        }

        match val {
            0 => Op::Add,

            _ => panic!("invalid enum discriminant"),
        }
    }
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_eval_cabi<T: Guest>(arg0: i32, arg1: i32, arg2: i32) -> i32 {
    let result0 = T::eval(Op::_lift(arg0 as u8), arg1, arg2);
    _rt::as_i32(result0)
}
pub trait Guest {
    fn eval(op: Op, x: i32, y: i32) -> i32;
}
#[doc(hidden)]

macro_rules! __export_world_calculator_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


    #[export_name = "eval"]
    unsafe extern "C" fn export_eval(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
      $($path_to_types)*::_export_eval_cabi::<$ty>(arg0, arg1, arg2)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_calculator_cabi;
pub mod component {
    pub mod add {

        #[allow(clippy::all)]
        pub mod add {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn add(x: i32, y: i32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:add/add@0.1.0")]
                    extern "C" {
                        #[link_name = "add"]
                        fn wit_import(_: i32, _: i32) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i32(&x), _rt::as_i32(&y));
                    ret
                }
            }
        }
    }
}
mod _rt {

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_calculator_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_calculator_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_calculator_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:calculator:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 260] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x83\x01\x01A\x02\x01\
A\x06\x01B\x02\x01@\x02\x01xz\x01yz\0z\x04\0\x03add\x01\0\x03\x01\x17component:a\
dd/add@0.1.0\x05\0\x01m\x01\x03add\x03\0\x02op\x03\0\x01\x01@\x03\x02op\x02\x01x\
z\x01yz\0z\x04\0\x04eval\x01\x03\x04\x01\x1fcomponent:calculator/calculator\x04\0\
\x0b\x10\x01\0\x0acalculator\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.201.0\x10wit-bindgen-rust\x060.20.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
